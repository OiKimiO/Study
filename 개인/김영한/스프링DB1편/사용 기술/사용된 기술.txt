1. H2 데이터베이스 설정
  - 개발 이나 테스트를 하기 좋고, 테스트 페이지도 보여줌

2. JDBC
  - 나오게 된 배경 
      * 다른 종류의 데이터베이스로 변경할 경우 관련된 사용코드를 모두 변경해야됨
      * 각각의 데이터베이스마다 새로운 학습을 해야된다는 문제
   - 특징 
      * Java에서 DB 연결 방식의 표준 인터페이스를 정하여 데이터베이스에 접속할 수 있도록 도움을 주는 API 
      # 표준 인터페이스
             $ java.sql.Connection 
          > 연결
             $ java.sql.Statement
          > SQL을 담은 내용
             $ java.sql.ResultSet
          > SQL 요청 응답
      * 표준 인터페이스를 기준으로 DB 벤더사의 Driver를 제공하도록 요청함
   - 한계
      * 각각의 데이터베이스마다 일부 사용법이 다름
        # 데이터베이스별 ANSI SQL 표준을 따르지만 모두 같은건 아니라 
           데이터베이스 변경시 다른 SQL 정의해야함
      * 이러한 한계는 JPA로 해결할 수 있음
   - 사용법
      * SQL Mapper
        # 장점
         $ JDBC의 반복 코드를 제거 
         $ SQL응답 결과를 객체로 편리하게 변환 
         $ SQL만 작성하면 나머지는 SQL Mapper가 대신 해줌
        # 단점
            $ ORM과 비교하여 개발자가 SQL을 직접 작성해야함
      * DriverManager
        # Connection 요청 흐름
            $ getConnection 함수가 실행되면 라이브러리에 등록된 데이터베이스 
               드라이버를 실행 
            $ 테스트시에는 h2 드라이버를 사용
      * PrepareStatement
     # SQL 내용을 담음 
          $ 무조건 PrepareStatement를 사용해야함
        # 장점
          $ SQL Injection 공격을 당하지 않을 수 있음 
             > SQL Injection
               - 파라미터의 value값을 쿼리문으로 적어 공격
             > 파라미터가 쿼리문이 아닌 단순한 데이터로 인식됨

3. ORM 기술
   - 특징
     * 객체를 관계형 데이터베이스 테이블과 매핑해주는 기술
    * 개발자 대신에 SQL을 동적으로 만들어 실행
   - 대표기술 
     * JPA
       # 자바진영의 ORM 표준 인터페이스
     * 하이버네이트, 이클립스 링크 
        # JPA 인터페이스를 구현한 구현체들
        # 보통 하이버네이트를 사용
    - 장점
      * SQL 자체를 작성하지 않아도 됨
    - 단점
      *  쉬운 기술이 아니라 심도있는 학습이 필요
