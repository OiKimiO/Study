다이나믹 프로그래밍
 1. 문제 푸는 방법
   (1) Overlapping Subproblem 
      - 겹치는 부분(작은)문제 
        1) 피보나치
           - F(N-2) + F(N-1) = F(N) 
             * 큰 문제인 F(N)을 작은 문제인 F(N-2)와 F(N-1)로 분할하여 푼다.
   (2) Optimal Substructure
      - 최적부분구조
        * 문제의 정답을 작은 문제의 정답에서 구할 수 있다.
        * 같은 문제의 정답을 매번 구하면 비효율적이다.
        * 그래서 정답을 한번 구했으면 어딘가 메모해두고 다음부터는 그 정답을 이용한다.
         
 2. 구현방식
   - 점화식의 정의 
   (1) Top-down 
     - 큰문제를 작은문제로 나누어 푼다. 
       * 재귀를 이용하여 문제를 해결한다.
       1) 시간
         - 재귀는 Stack을 사용하여 함수를 사용하기 떄문에 StackOverflow가 발생할 수 있음
   (2) Bottom-up
     - 작은문제를 차례로 푼다. 
       * 주로 반복문을 사용하여 문제를 해결한다.
       1) 시간
         - 모든 작은 수에 대한 경우를 다 계산해야 한다.
       